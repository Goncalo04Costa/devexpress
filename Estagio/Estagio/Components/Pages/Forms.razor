@page "/novoticket"
@using Estagio.Services
@inject TicketService TicketService
@attribute [StreamRendering(true)]
@rendermode InteractiveServer

<PageTitle>Novo Ticket</PageTitle>
<h1>Criar Ticket</h1>

<EditForm Model="newTicket" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="Title">Title</label>
        <InputText id="Title" class="form-control" @bind-Value="newTicket.Title" />
        <ValidationMessage For="@(() => newTicket.Title)" />
    </div>
    <div class="form-group">
        <label for="Nome">Name</label>
        <InputText id="Nome" class="form-control" @bind-Value="newTicket.Nome" />
        <ValidationMessage For="@(() => newTicket.Nome)" />
    </div>
    <div class="form-group">
        <label for="Email">Email</label>
        <InputText id="Email" class="form-control" @bind-Value="newTicket.Email" />
        <ValidationMessage For="@(() => newTicket.Email)" />
    </div>
    <div class="form-group">
        <label for="Phone">Phone</label>
        <InputText id="Phone" class="form-control" @bind-Value="newTicket.Phone" />
        <ValidationMessage For="@(() => newTicket.Phone)" />
    </div>
    <div class="form-group">
        <label for="Assunto">Subject</label>
        <InputText id="Assunto" class="form-control" @bind-Value="newTicket.Assunto" />
        <ValidationMessage For="@(() => newTicket.Assunto)" />
    </div>

    <div class="form-group">
        <label for="State">State</label>
        <InputText id="State" class="form-control" value="Open" readonly />
        <ValidationMessage For="@(() => newTicket.Estado)" />
    </div>

    <div class="form-group">
        <label for="Date">Date</label>
        <InputText id="Date" class="form-control" value="@DateTime.Now.ToString("yyyy-MM-dd")" readonly />
        <ValidationMessage For="@(() => newTicket.Date)" />
    </div>

    <button type="submit" class="btn btn-primary" disabled="@isSubmitting">Create Ticket</button>
</EditForm>

@if (isTicketCreated)
{
    <p class="text-success">Ticket created successfully!</p>
}

@if (isError)
{
    <p class="text-danger">Error creating ticket. Please try again.</p>
}

@if (isSubmitting)
{
    <p><em>Creating ticket...</em></p>
}

@code {
    private Estagio.Services.Ticket newTicket = new Estagio.Services.Ticket
        {
            Date = DateOnly.FromDateTime(DateTime.Now)
        };

    private bool isTicketCreated = false;
    private bool isSubmitting = false;
    private bool isError = false;

    private async Task HandleSubmit()
    {
        isSubmitting = true;
        isError = false;

        try
        {
            await TicketService.AddNewTicketAsync(newTicket);
            isTicketCreated = true;
            newTicket = new Estagio.Services.Ticket();  // Clear form after submission
        }
        catch (Exception ex)
        {
            isError = true;
            Console.WriteLine($"Error creating ticket: {ex.Message}");
            // Optionally, you can show a more specific error message based on ex.Message
        }
        finally
        {
            isSubmitting = false;
        }
    }
}

@page "/stats"
@using Estagio.Services
@inject TicketService TicketService
@attribute [StreamRendering(true)]
@rendermode InteractiveServer

<link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
<link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />

<PageTitle>Tickets</PageTitle>
<h1>Tickets</h1>


    <h3 class="mt-4">Tickets by State</h3>
    <DxPieChart Data="Tickets
        .GroupBy(t => t.Estado)
        .Select(g => new DonutDataItem(g.Key.ToString(), g.Count()))
        .ToArray()"
                Width="100%"
                InnerDiameter="0.5">
        <DxChartTitle Text="Tickets by State" />
        <DxPieChartSeries T="DonutDataItem"
                          TArgument="string"
                          TValue="double"
                          ArgumentField="s => s.State"
                          ValueField="s => s.Amount">
            <DxChartSeriesLabel Visible="true"
                                Position="RelativePosition.Inside"
                                ValueFormat='ChartElementFormat.FromLdmlString("# Tickets")' />
        </DxPieChartSeries>
        <DxChartLegend VerticalAlignment="VerticalEdge.Bottom"
                       Position="RelativePosition.Outside" />
        <DxChartTooltip Enabled="true" Position="RelativePosition.Outside">
            <div class="m-2">
                <div>
                    @context.Point.Argument + ": " + context.Point.Value + " tickets"
                </div>
            </div>
        </DxChartTooltip>
    </DxPieChart>


@code {
    
    private Estagio.Services.Ticket[]? Tickets;
    private Estagio.Services.Ticket[]? allTickets;
    private string SearchTitle { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        
        var serviceTickets = await TicketService.GetTicketsAsync(DateOnly.FromDateTime(DateTime.Now));

      
        allTickets = serviceTickets.Select(ticket => new Estagio.Services.Ticket
            {
                Id = ticket.Id,
                Date = ticket.Date,
                Nome = ticket.Nome,
                Empresa = ticket.Empresa,
                Email = ticket.Email,
                Telefone = ticket.Telefone,
                Assunto = ticket.Assunto,
                Estado = ticket.Estado
            }).ToArray();

        Tickets = allTickets;
    }

    private void FilterTicketsByCode()
    {
        Tickets = string.IsNullOrEmpty(SearchTitle)
            ? allTickets
            : allTickets.Where(ticket => ticket.Id.Equals(SearchTitle, StringComparison.OrdinalIgnoreCase)).ToArray();
    }

   
    class DonutDataItem
    {
        public string State { get; }
        public double Amount { get; }

        public DonutDataItem(string state, double amount)
        {
            (State, Amount) = (state, amount);
        }
    }
}

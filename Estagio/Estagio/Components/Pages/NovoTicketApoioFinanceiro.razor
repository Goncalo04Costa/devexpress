@page "/novoticketapoioFinanceiro"
@using Estagio.Services
@inject TicketService TicketService
@attribute [StreamRendering(true)]
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

<link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
<link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />


<PageTitle>Novo Ticket</PageTitle>

<div class="main-content">
    <DxGridLayout CssClass="welcome-gridlayout" RowSpacing="3rem">

        <Rows>
            <!-- Linha para o cabeçalho -->
            <DxGridLayoutRow Height="auto" Areas="header"></DxGridLayoutRow>
            <!-- Linha para o texto fora do cabeçalho -->
            <DxGridLayoutRow Height="auto" Areas="text"></DxGridLayoutRow>
            <!-- Linha para os cartões -->
            <DxGridLayoutRow Height="auto" Areas="cards"></DxGridLayoutRow>
        </Rows>
        <Items>


            <DxGridLayoutItem Area="header" CssClass="site-header">
                <Template>
                    <header>
                        <div class="header-content" style="display: flex; align-items: center; justify-content: space-between; padding: 1rem; background-color: #E8F2F3; border-radius: 8px;">
                            <div class="title-text">
                                <img class="welcome-card-img" src="images/logos.png" alt="Logos" />
                            </div>
                            <div class="ticket-button">
                                <NavLink class="welcome-card welcome-card-ver-ticket" href="/ticket" style="background-color: #00A9A9; color: white; padding: 10px 20px; border-radius: 5px; box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1); transition: background-color 0.3s ease;">
                                    <svg class="welcome-card-img" aria-label="Ver o seu ticket" style="fill: white;">
                                        <use href="images/cards.svg#tickets"></use>
                                    </svg>
                                    <div class="welcome-card-text">Ver o seu ticket</div>
                                    <div class="welcome-card-back"></div>
                                </NavLink>
                            </div>
                        </div>
                    </header>
                </Template>
            </DxGridLayoutItem>

            <!-- Conteúdo da Página -->
            <p>Inicio > Apoio ao Cliente > <bold>Financeiro</bold></p>
            <div class="title-header-text">
                <NavLink class="arrow-link" href="/Apoio">></NavLink>
                Novo Ticket!
            </div>
            <EditForm Model="newTicket" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <!-- Campos do Formulário -->
                <div class="form-group">
                    <label for="Nome">Nome *</label>
                    <InputText id="Nome" class="form-control" @bind-Value="newTicket.Nome" style="background-color: white; color: black;" />
                    <ValidationMessage For="@(() => newTicket.Nome)" />
                </div>

                <div class="form-group">
                    <label for="Empresa">Empresa *</label>
                    <InputText id="Empresa" class="form-control" @bind-Value="newTicket.Empresa" style="background-color: white; color: black;" />
                    <ValidationMessage For="@(() => newTicket.Empresa)" />
                </div>

                <div class="form-group">
                    <label for="Email">Email *</label>
                    <InputText id="Email" class="form-control" @bind-Value="newTicket.Email" style="background-color: white; color: black;" />
                    <ValidationMessage For="@(() => newTicket.Email)" />
                </div>

                <div class="form-group">
                    <label for="Phone">Telefone</label>
                    <InputText id="Phone" class="form-control" @bind-Value="newTicket.Telefone" style="background-color: white; color: black;" />
                    <ValidationMessage For="@(() => newTicket.Telefone)" />
                </div>

                <div class="form-group">
                    <label for="Assunto">Assunto *</label>
                    <InputText id="Assunto" class="form-control" @bind-Value="newTicket.Assunto" style="background-color: white; color: black; height: 70px;" />
                    <ValidationMessage For="@(() => newTicket.Assunto)" />
                </div>


                <!-- Upload de ficheiros (Drag and Drop) -->
                <div class="form-group" style="background-color: white">
                    <label>Upload de Ficheiros</label>
                    <div id="overviewDemoDropZone" class="card custom-drop-zone rounded-3 w-100 m-0">
                        <span class="drop-file-icon mb-3"></span>
                        <span class="drop-file-label">Drag and Drop File Here </span>
                        <span class="m-1">or</span>
                        <DxButton Id="overviewDemoSelectButton"
                                  CssClass="m-1"
                                  RenderStyle="ButtonRenderStyle.Light"
                                  Text="Select File" />
                    </div>

                    <DxFileInput Visible="@UploadVisible"
                                 ExternalSelectButtonCssSelector="#overviewDemoSelectButton"
                                 ExternalDropZoneCssSelector="#overviewDemoDropZone"
                                 ExternalDropZoneDragOverCssClass="custom-drop-zone-hover"
                                 MaxFileSize="5000000"
                                 FilesUploading="OnFilesUploading"
                                 SelectedFilesChanged="@SelectedFilesChanged">
                    </DxFileInput>
                </div>


             
                <!-- Botão de Envio -->
                <div class="text-center mt-4">
                    <button type="submit" style="background-color: #1B7C87;" class="btn btn-primary" disabled="@isSubmitting">Criar Ticket</button>
                </div>
            </EditForm>

            @if (isTicketCreated)
            {
                <p class="text-success text-center">Ticket criado com sucesso!</p>
            }
            @if (isError)
            {
                <p class="text-danger text-center">Erro ao criar ticket. Tente novamente.</p>
            }
            @if (isSubmitting)
            {
                <p class="text-center"><em>Criando ticket...</em></p>
            }
        </Items>
    </DxGridLayout>

    <div class="site-footer">
        <div class="footer-content">
            <div class="footer-images">
                <img class="footer-logo" src="images/rodape.png" alt="Logo 1" />
            </div>
        </div>
    </div>
</div>

@code {

    private Estagio.Services.Ticket newTicket = new Estagio.Services.Ticket
        {
            Date = DateTime.Now,
            Estado = EstadoTarefa.PorIniciar
        };

    private bool isTicketCreated = false;
    private bool isSubmitting = false;
    private bool isError = false;
    private bool UploadVisible { get; set; } = false;

    private List<string> uploadedFiles = new List<string>();
    private int SelectedFilesCount { get; set; }

    private async Task HandleSubmit()
    {
        isSubmitting = true;
        isError = false;
        try
        {
            await TicketService.AddNewTicketAsync(newTicket);
            isTicketCreated = true;
            newTicket = new Estagio.Services.Ticket();
            uploadedFiles.Clear();
            StateHasChanged();
            NavigationManager.NavigateTo("/sucesso");
        }
        catch (Exception ex)
        {
            isError = true;
            Console.WriteLine($"Erro ao criar ticket: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    protected void SelectedFilesChanged(IEnumerable<UploadFileInfo> files)
    {
        UploadVisible = files.ToList().Count > 0;
        SelectedFilesCount = files.ToList().Count;
        uploadedFiles.AddRange(files.Select(f => f.Name));
        InvokeAsync(StateHasChanged);
    }

    protected async Task OnFilesUploading(FilesUploadingEventArgs args)
    {
        foreach (var file in args.Files)
        {
            var allowedExtensions = new[] { ".pdf", ".jpg", ".png" };
            if (!allowedExtensions.Contains(Path.GetExtension(file.Name).ToLower()))
            {
                Console.WriteLine($"Ficheiro {file.Name} com extensão inválida.");
                continue;
            }

            if (file.Size > 15000000)
            {
                Console.WriteLine($"Ficheiro {file.Name} excede o tamanho máximo permitido.");
                continue;
            }

            var folderName = SanitizeFolderName($"{newTicket.Nome}_{newTicket.Assunto}_{newTicket.Date}".Replace(" ", "_"));
            await CreateFolderIfNeeded(folderName);

            using var stream = new System.IO.MemoryStream();
            await file.OpenReadStream(file.Size).CopyToAsync(stream);

            await SaveFileToServer(stream, file.Name, folderName);
        }
    }

    protected async Task CreateFolderIfNeeded(string folderName)
    {
        var folderPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/uploads", folderName);
        if (!Directory.Exists(folderPath))
        {
            Directory.CreateDirectory(folderPath);
        }

        await Task.CompletedTask;
    }

    protected string SanitizeFolderName(string folderName)
    {
        var invalidChars = Path.GetInvalidFileNameChars();
        foreach (var invalidChar in invalidChars)
        {
            folderName = folderName.Replace(invalidChar.ToString(), "_");
        }
        return folderName;
    }

    protected async Task SaveFileToServer(MemoryStream stream, string fileName, string folderName)
    {
        var folderPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/uploads", folderName);
        var filePath = Path.Combine(folderPath, fileName);

        using (var fileStream = new FileStream(filePath, FileMode.Create))
        {
            await stream.CopyToAsync(fileStream);
        }
    }
}
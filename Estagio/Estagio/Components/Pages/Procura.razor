@page "/procura"
@using Estagio.Services
@inject TicketService TicketService
@attribute [StreamRendering(true)]
@rendermode InteractiveServer

<PageTitle>Tickets</PageTitle>
<h1>Tickets</h1>

<div class="filter-section">
    <label for="deOverview" class="demo-text cw-320 mb-1">Date Range</label>
    <DxDateRangePicker @bind-StartDate="DateTimeStart"
                       @bind-EndDate="DateTimeEnd"
                       CssClass="cw-320"
                       InputId="deOverview" />
    <p class="demo-text cw-320 mt-3">
        Selected Date Range:
        <b>@DateTimeStart.ToString("dddd, dd MMMM yyyy")</b> - <b>@DateTimeEnd.ToString("dddd, dd MMMM yyyy")</b>
    </p>
</div>

<div class="filter-section mt-3">
    <label for="titleSearch" class="demo-text cw-320 mb-1">Search by Title</label>
    <input type="text" id="titleSearch" class="cw-320" @bind="SearchTitle" placeholder="Search by ticket title..." />
    <button class="btn btn-primary mt-2" @onclick="FilterTicketsByTitle">Search</button>
</div>

<button class="btn btn-primary mt-2" @onclick="FilterTicketsByDate">Filter Tickets by Date</button>

@if (Tickets == null)
{
    <p><em>Loading...</em></p>
}
else
{
<DxGrid Data="@Tickets" CssClass="mw-1100">
    <Columns>
        <DxGridDataColumn Caption="Date" FieldName="Date" />
        <DxGridDataColumn Caption="Title" FieldName="Title" />
        <DxGridDataColumn Caption="Nome" FieldName="Nome" />
        <DxGridDataColumn Caption="Email" FieldName="Email" />
        <DxGridDataColumn Caption="Phone" FieldName="Phone" />
        <DxGridDataColumn Caption="Assunto" FieldName="Assunto" />
       <DxGridDataColumn Caption="Estado" FieldName="Estado">
</DxGridDataColumn>

    </Columns>
</DxGrid>





    <!-- Gráfico de Tickets por Estado -->
    <h3 class="mt-4">Tickets by State</h3>
    <DxPieChart Data="Tickets
        .GroupBy(t => t.Estado)
        .Select(g => new DonutDataItem(g.Key.ToString(), g.Count()))
        .ToArray()"
                Width="100%"
                InnerDiameter="0.5">
        <DxChartTitle Text="Tickets by State" />
        <DxPieChartSeries T="DonutDataItem"
                          TArgument="string"
                          TValue="double"
                          ArgumentField="s => s.Year"
                          ValueField="s => s.Amount">
            <DxChartSeriesLabel Visible="true"
                                Position="RelativePosition.Inside"
                                ValueFormat='ChartElementFormat.FromLdmlString("# Tickets")' />
        </DxPieChartSeries>
        <DxChartLegend VerticalAlignment="VerticalEdge.Bottom"
                       Position="RelativePosition.Outside" />
        <DxChartTooltip Enabled="true" Position="RelativePosition.Outside">
            <div class="m-2">
                <div>
                    @context.Point.Argument + ": " + context.Point.Value + " tickets"
                </div>
            </div>
        </DxChartTooltip>
    </DxPieChart>
}

@code {
    private Estagio.Services.Ticket[]? Tickets;
    private Estagio.Services.Ticket[]? allTickets;
    private string SearchTitle { get; set; } = string.Empty;

    DateTime DateTimeStart { get; set; } = DateTime.Today;
    DateTime DateTimeEnd { get; set; } = DateTime.Today.AddDays(7);

    protected override async Task OnInitializedAsync()
    {

        var serviceTickets = await TicketService.GetTicketsAsync(DateOnly.FromDateTime(DateTime.Now));

        allTickets = serviceTickets.Select(ticket => new Estagio.Services.Ticket
            {
                Date = ticket.Date,
                Nome = ticket.Nome,
                Email = ticket.Email,
                Telefone = ticket.Telefone,
                Assunto = ticket.Assunto,
                Estado = ticket.Estado
            }).ToArray();


        Tickets = allTickets;
    }


    private void FilterTicketsByDate()
    {
        if (DateTimeStart != null && DateTimeEnd != null)
        {
            Tickets = allTickets.Where(ticket => ticket.Date >= DateOnly.FromDateTime(DateTimeStart) && ticket.Date <= DateOnly.FromDateTime(DateTimeEnd))
                                .ToArray();
        }
        else
        {
            Tickets = allTickets;
        }
    }

    private void FilterTicketsByTitle()
    {
        if (!string.IsNullOrEmpty(SearchTitle))
        {
            Tickets = allTickets.Where(ticket => ticket.Id.Contains(SearchTitle, StringComparison.OrdinalIgnoreCase)).ToArray();
        }
        else
        {
            Tickets = allTickets;
        }
    }

    class DonutDataItem
    {
        public string Year { get; }
        public double Amount { get; }

        public DonutDataItem(string year, double amount)
        {
            (Year, Amount) = (year, amount);
        }
    }
}
